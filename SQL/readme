SQL Test Code v.1
----------------------------------------------------------------------------------
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_extension WHERE extname = 'uuid-ossp'
  ) THEN
    CREATE EXTENSION "uuid-ossp";
  END IF;
END$$;

-- MESSAGES: stores every delivery (duplicates included)
CREATE TABLE IF NOT EXISTS messages (
  id                 BIGSERIAL PRIMARY KEY,
  unique_identifier  TEXT        NOT NULL,  -- from payload
  item_id            TEXT        NOT NULL,
  location           TEXT        NOT NULL,
  quantity           INTEGER     NOT NULL CHECK (quantity >= 0),
  transaction_dt     TIMESTAMPTZ NOT NULL,
  transaction_no     TEXT        NOT NULL,
  pubsub_message_id  TEXT,                 -- optional: GCP messageId for audit
  received_at        TIMESTAMPTZ NOT NULL DEFAULT now(),
  is_duplicate       BOOLEAN     NOT NULL DEFAULT FALSE
);

-- Tracks first-seen + how many times we've seen that unique id
CREATE TABLE IF NOT EXISTS message_identity (
  unique_identifier  TEXT PRIMARY KEY,
  first_seen_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  seen_count         INTEGER      NOT NULL DEFAULT 1
);

-- Optional ingest log for debugging/observability
CREATE TABLE IF NOT EXISTS message_ingest_log (
  id            BIGSERIAL PRIMARY KEY,
  message_id    BIGINT NOT NULL REFERENCES messages(id) ON DELETE CASCADE,
  consumer_run  TEXT   NOT NULL,                -- e.g., ISO timestamp or run id
  note          TEXT,
  logged_at     TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Helpful indexes for your UI queries
CREATE INDEX IF NOT EXISTS ix_messages_transaction_dt ON messages (transaction_dt DESC);
CREATE INDEX IF NOT EXISTS ix_messages_location       ON messages (location);
CREATE INDEX IF NOT EXISTS ix_messages_transaction_no ON messages (transaction_no);

-- Duplicate handling trigger: bump or create identity counter after each insert
CREATE OR REPLACE FUNCTION bump_seen_count() RETURNS TRIGGER AS $$
BEGIN
  UPDATE message_identity
     SET seen_count = seen_count + 1
   WHERE unique_identifier = NEW.unique_identifier;

  IF NOT FOUND THEN
    INSERT INTO message_identity (unique_identifier) VALUES (NEW.unique_identifier);
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Re-create trigger safely
DROP TRIGGER IF EXISTS trg_bump_seen_count ON messages;
CREATE TRIGGER trg_bump_seen_count
AFTER INSERT ON messages
FOR EACH ROW
EXECUTE FUNCTION bump_seen_count();
